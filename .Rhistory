print(param_set)
print(param_set)
param_set[1]$storage_type
param_set <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for (i in 1:nrow(param_set)){
if (param_set[i]$storage_type=="list"){
param_set[i]$levels <- paste(param_set[i]$levels, collapse = ',')
}
param_set[i]$default <- paste(param_set[i]$default, collapse = ',')
}
#as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
print(param_set)
param_set <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for (i in 1:nrow(param_set)){
if (param_set[i]$storage_type=="list"){
param_set[i]$levels <- paste(param_set[i]$levels, sep = ',')
}
param_set[i]$default <- paste(param_set[i]$default, sep = ',')
}
#as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
print(param_set)
param_set <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for (i in 1:nrow(param_set)){
param_set[i]$levels <- paste(param_set[i]$levels, sep = ',')
param_set[i]$default <- paste(param_set[i]$default, sep = ',')
}
#as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
print(param_set)
param_set[1]$levels
split(param_set[1]$levels,"\\")
split(param_set[1]$levels,'\"')
split(param_set[1]$levels,sep='\"')
strsplit(param_set[1]$levels,'\"')
strsplit(param_set[[1]]$levels,'\"')
param_set[1]$levels
type(param_set[1]$levels)
class(param_set[1]$levels)
param_set[1]$levels[1]
param_set[1]$levels[[1]]
split(param_set[1]$levels[[1]],"\\")
strsplit(param_set[1]$levels[[1]],'\!')
strsplit(param_set[1]$levels[[1]],'\"')
strsplit(param_set[1]$levels[[1]],'\"')[2:-1]
strsplit(param_set[1]$levels[[1]],'\"')[2:]
sp <- strsplit(param_set[1]$levels[[1]],'\"')
sp[2:length(sp)-1]
sp[[1]][2:length(sp)-1]
sp[2:length(sp)-1]
sp[c(2:length(sp)-1)]
sp[c(2:length(sp[[1]])-1)]
sp[[1]]
sp[[1]][c(2:length(sp[[1]])-1)]
sp[[1]][c(3:length(sp[[1]])-1)]
ls <- sp[[1]][c(3:length(sp[[1]])-1)]
paste(ls, collapse = "")
strsplit(param_set[1]$default[[1]],'\"')
param_set <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for (i in 1:nrow(param_set)){
sp <- strsplit(param_set[i]$levels[[1]],'\"')
ls <- sp[[1]][c(3:length(sp[[1]])-1)]
param_set[i]$levels <- paste(ls, collapse = '')
sp <- strsplit(param_set[i]$default[[1]],'\"')
ls <- sp[[1]][c(3:length(sp[[1]])-1)]
param_set[i]$default <- paste(ls, collapse = '')
}
param_set <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for (i in 1:nrow(param_set)){
if(class(param_set[i]$levels[[1]])=="character"){
sp <- strsplit(param_set[i]$levels[[1]],'\"')
ls <- sp[[1]][c(3:length(sp[[1]])-1)]
param_set[i]$levels <- paste(ls, collapse = '')
}
if(class(param_set[i]$default[[1]])=="character"){
sp <- strsplit(param_set[i]$default[[1]],'\"')
ls <- sp[[1]][c(3:length(sp[[1]])-1)]
param_set[i]$default <- paste(ls, collapse = '')
}
}
#as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
print(param_set)
param_set
param_set <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for (i in 1:nrow(param_set)){
if(class(param_set[i]$levels[[1]])=="character"){
sp <- strsplit(param_set[i]$levels[[1]],'\"')
ls <- sp[[1]][c(3:length(sp[[1]])-1)]
param_set[i]$levels <- paste(ls, collapse = '')
print(param_set[i]$levels)
}
if(class(param_set[i]$default[[1]])=="character"){
sp <- strsplit(param_set[i]$default[[1]],'\"')
ls <- sp[[1]][c(3:length(sp[[1]])-1)]
param_set[i]$default <- paste(ls, collapse = '')
}
}
#as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
print(param_set)
learner$param_set
as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
param_set <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for (i in 1:nrow(param_set)){
if(class(param_set[i]$levels[[1]])=="character"){
sp <- strsplit(param_set[i]$levels[[1]],'\"')
ls <- sp[[1]][c(3:length(sp[[1]])-1)]
param_set[i]$levels <- paste(ls, collapse = '')
print(param_set[i]$levels)
}
if(class(param_set[i]$default[[1]])=="character"){
sp <- strsplit(param_set[i]$default[[1]],'\"')
ls <- sp[[1]][c(3:length(sp[[1]])-1)]
param_set[i]$default <- paste(ls, collapse = '')
}
}
print(param_set)
param_set <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for (i in 1:nrow(param_set)){
if(class(param_set[i]$levels[[1]])=="character"){
sp <- strsplit(param_set[i]$levels[[1]],'\"')
ls <- sp[[1]][c(3:length(sp[[1]])-1)]
param_set[i]$levels <- paste(ls, collapse = '')
print(param_set[i]$levels)
}
if(class(param_set[i]$default[[1]])=="character"){
sp <- strsplit(param_set[i]$default[[1]],'\"')
ls <- sp[[1]][c(3:length(sp[[1]])-1)]
param_set[i]$default <- paste(ls, collapse = '')
}
}
print(param_set)
sp <- strsplit(param_set[1]$levels[[1]],'\"')
ls <- sp[[1]][c(3:length(sp[[1]])-1)]
param_set[1]$levels <- paste(ls, collapse = '')
param_set[1]$levels
class(param_set[1]$levels[[1]])=="character"
class(param_set[1]$levels[[1]])
sp <- strsplit(param_set[1]$levels[[1]],'\"')
sp
param_set[i]$levels[[1]]
param_set[i]$levels
param_set <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
param_set[1]$levels[[1]]
strsplit(param_set[i]$levels[[1]],'\"')
strsplit(param_set[1]$levels[[1]],'\"')
param_set <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
param_set[3]$levels[[1]]
param_set[1]$levels[[1]]
l <- param_set[i]$levels[[1]])
l <- param_set[i]$levels[[1]]
paste(l, collapse = '')
as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
learner$param_set[,c(1,2,3,4,5,9,10)]
learner$param_set
learner$param_set$levels
print(learner$param_set)
p <- learner$param_set
p<-NULL
p <- data.frame(id=learner$param_set$ids(), class = learner$param_set$class, lower = learner$param_set$lower, learner$param_set$upper, levels = learner$param_set$levels, default= learner$param_set$default, storage_type = learner$param_set$storage_type)
learner$param_set$ids()
learner$param_set$class
a
p <- data.frame(class = learner$param_set$class, lower = learner$param_set$lower, learner$param_set$upper, levels = learner$param_set$levels, default= learner$param_set$default, storage_type = learner$param_set$storage_type)
learner$param_set$lower
learner$param_set$upper
learner$param_set$levels
learner$param_set$default
learner$param_set$storage_type
learner$param_set$levels[1]
param_set <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
param_set$levels[1]
paste( param_set$levels[1], collapse = '')
param_set$levels[1]
param_set$levels[[1]]
paste( param_set$levels[[1]], collapse = '')
paste( param_set$levels[[1]], collapse = ',')
paste( param_set$levels[[2]], collapse = ',')
paste( param_set$levels[[3]], collapse = ',')
paste( param_set$levels[[6]], collapse = ',')
paste( param_set$levels[[5]], collapse = ',')
for(i in 1:nrow(param_set$levels)){
param_set$levels[i] <- paste(param_set$levels[[i]], collapse = ',')
}
nrow(param_set$levels)
length(param_set$levels)
for(i in 1:length(param_set$levels)){
param_set$levels[i] <- paste(param_set$levels[[i]], collapse = ',')
}
param_set <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:length(param_set$levels)){
param_set$levels[i] <- paste(param_set$levels[[i]], collapse = ',')
param_set$default[i] <- paste(param_set$default[[i]], collapse = ',')
}
param_set$default[1]
param_set <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:length(param_set$levels)){
param_set$levels[i] <- paste(param_set$levels[[i]], collapse = ',')
param_set$default[i] <- param_set$default[[i]]
}
param_set$default[[1]]
param_set$default[1]
param_set<-data.frame()
for(i in 1:length(as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)])){
param_set$levels[i] <- paste(param_set$levels[[i]], collapse = ',')
param_set$default[i] <- param_set$default[[i]]
}
param_set<-data.frame()
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)])
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:length(p){
param_set<-data.frame()
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:length(p){
for(i in 1:length(p)){
param_set$levels[i] <- paste(p$levels[[i]], collapse = ',')
param_set$default[i] <- p$default[[i]]
}
param_set<-data.frame(levels=list(),default=list())
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:length(p)){
param_set$levels[i] <- paste(p$levels[[i]], collapse = ',')
param_set$default[i] <- p$default[[i]]
}
param_set<-data.frame(levels=list(rep(0,length(p))),default=list(rep(0,length(p))))
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:length(p)){
param_set$levels[i] <- paste(p$levels[[i]], collapse = ',')
param_set$default[i] <- p$default[[i]]
}
param_set<-data.frame(levels=list(rep(0,length(p))),default=list(rep(0,length(p))))
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:length(p)){
param_set$levels[i] <- paste(p$levels[[i]], collapse = ',')
param_set$default[i] <- str(p$default[[i]])
}
pd <- data.frame(class = learner$param_set$class, lower = learner$param_set$lower, learner$param_set$upper, levels = param_set$levels, default= param_set$default, storage_type = learner$param_set$storage_type)
pd <- data.frame(class = learner$param_set$class, lower = learner$param_set$lower, learner$param_set$upper, levels = param_set$levels, default= param_set$default)
nrow(learner$param_set$class)
learner$param_set$class
noname(learner$param_set$class)
unname(learner$param_set$class)
pd <- data.frame(class = unname(learner$param_set$class), lower = unname(learner$param_set$lower), unname(learner$param_set$upper), levels = unname(param_set$levels), default= unname(param_set$default))
param_set$levels
length(p)
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
length(p)
nrow(p)
param_set<-data.frame(levels=list(rep(0,length(p))),default=list(rep(0,length(p))))
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:nrow(p)){
param_set$levels[i] <- paste(p$levels[[i]], collapse = ',')
param_set$default[i] <- str(p$default[[i]])
}
param_set<-data.frame(levels=list(rep(0,nrow(p))),default=list(rep(0,nrow(p))))
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:nrow(p)){
param_set$levels[i] <- paste(p$levels[[i]], collapse = ',')
param_set$default[i] <- str(p$default[[i]])
}
pd <- data.frame(class = unname(learner$param_set$class), lower = unname(learner$param_set$lower), unname(learner$param_set$upper), levels = param_set$levels, default= unname(param_set$default))
pd <- data.frame(class = unname(learner$param_set$class), lower = unname(learner$param_set$lower), unname(learner$param_set$upper), levels = param_set$levels, default= param_set$default)
learner$param_set$class
learner$param_set$lower
learner$param_set$upper
param_set$levels
param_set$default
p$default[[1]]
str(p$default[[i]])
str(p$default[i])
str(p$default[[i]])[1]
print(param_set)
param_set<-data.frame(levels=list(rep(0,nrow(p))),default=list(rep(0,nrow(p))))
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:nrow(p)){
param_set$levels[i] <- paste(p$levels[[i]], collapse = ',')
param_set$default[i] <- p$default[[i]]
}
p$default[[i]]$clone()
learner$param_set$default[1]
learner$param_set$default[[1]]
param_set<-data.frame(levels=list(rep(0,nrow(p))),default=list(rep(0,nrow(p))))
for(i in 1:nrow(learner$param_set)){
param_set$levels[i] <- paste(learner$param_set$levels[[i]], collapse = ',')
param_set$default[i] <- learner$param_set$default[[i]]
}
length(learner$param_set)
param_set<-data.frame(levels=list(rep(0,length(learner$param_set))),default=list(rep(0,length(learner$param_set))))
for(i in 1:length(learner$param_set)){
param_set$levels[i] <- paste(learner$param_set$levels[[i]], collapse = ',')
param_set$default[i] <- learner$param_set$default[[i]]
}
for(i in 1:length(learner$param_set)){
param_set$levels[i] <- paste(learner$param_set$levels[[i]], collapse = ',')
param_set$default[i] <- learner$param_set$default[[i]]
print(i)
}
learner$param_set$default[[34]]
learner$param_set$default[[33]]
learner$param_set$default[[35]]
param_set<-data.frame(levels=list(rep(0,length(learner$param_set))),default=list(rep(0,length(learner$param_set))))
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:length(learner$param_set-1)){
param_set$levels[i] <- paste(learner$param_set$levels[[i]], collapse = ',')
param_set$default[i] <- learner$param_set$default[[i]]
print(i)
}
for(i in 1:(length(learner$param_set-1))){
param_set$levels[i] <- paste(learner$param_set$levels[[i]], collapse = ',')
param_set$default[i] <- learner$param_set$default[[i]]
print(i)
}
for(i in 1:(length(learner$param_set)-1)){
param_set$levels[i] <- paste(learner$param_set$levels[[i]], collapse = ',')
param_set$default[i] <- learner$param_set$default[[i]]
print(i)
}
length(learner$param_set)
learner$param_set$default[[34]]
learner$param_set$default[[41]]
learner$param_set$default
length(learner$param_set$default)
names(learner$param_set$default[[2]])
param_set<-data.frame(levels=list(rep(0,length(learner$param_set))),default=list(rep(0,length(learner$param_set))))
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:(length(learner$param_set)-1)){
param_set$levels[i] <- paste(learner$param_set$levels[[i]], collapse = ',')
#param_set$default[i] <- learner$param_set$default[[i]]
#print(i)
}
pd <- data.frame(class = unname(learner$param_set$class), lower = unname(learner$param_set$lower), unname(learner$param_set$upper), levels = param_set$levels, default= learner$param_set$default)
pd <- data.frame(class = unname(learner$param_set$class), lower = unname(learner$param_set$lower), unname(learner$param_set$upper), levels = param_set$levels)
param_set$levels
names(learner$param_set$default[[2]])unname(learner$param_set$class)
unname(learner$param_set$class)
param_set$levels
unname(learner$param_set$lower)
unname(learner$param_set$upper)
pd <- data.frame(class = unname(learner$param_set$class), lower = unname(learner$param_set$lower), unname(learner$param_set$upper), levels = param_set$levels)
param_set<-data.frame(levels=list(rep(0,length(learner$param_set))),default=list(rep(0,length(learner$param_set))))
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
pd <- data.frame(class = unname(learner$param_set$class), lower = unname(learner$param_set$lower), unname(learner$param_set$upper), levels = param_set$levels)
param_set$levels
param_set<-data.frame(levels=list(rep(0,length(learner$param_set))),default=list(rep(0,length(learner$param_set))))
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:(length(learner$param_set)-2)){
param_set$levels[i] <- paste(learner$param_set$levels[[i]], collapse = ',')
#param_set$default[i] <- learner$param_set$default[[i]]
#print(i)
}
pd <- data.frame(class = unname(learner$param_set$class), lower = unname(learner$param_set$lower), unname(learner$param_set$upper), levels = param_set$levels)
param_set<-data.frame(levels=list(rep(0,length(learner$param_set)-1)),default=list(rep(0,length(learner$param_set))))
param_set<-data.frame(levels=list(rep(0,length(learner$param_set)-1)),default=list(rep(0,length(learner$param_set))))
param_set<-data.frame(levels=list(rep(0,(length(learner$param_set)-1))),default=list(rep(0,length(learner$param_set))))
param_set<-data.frame(levels=list(rep(0,(length(learner$param_set)-1))))
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:(length(learner$param_set)-1)){
param_set$levels[i] <- paste(learner$param_set$levels[[i]], collapse = ',')
#param_set$default[i] <- learner$param_set$default[[i]]
#print(i)
}
pd <- data.frame(class = unname(learner$param_set$class), lower = unname(learner$param_set$lower), unname(learner$param_set$upper), levels = param_set$levels)
pd
pd <- data.frame(class = unname(learner$param_set$class), lower = unname(learner$param_set$lower), unname(learner$param_set$upper), levels = param_set$levels, default = learner$param_set$default)
learner$param_set$default
learner$param_set
learner$param_set
names(learner$param_set)
names(learner$param_set$levels)
learner$param_set$default[names[learner$param_set$levels][1]]
learner$param_set$default[names(learner$param_set$levels)[1]]
learner$param_set$default[names(learner$param_set$levels)[1]][[1]]
param_set<-data.frame(levels=list(rep(0,(length(learner$param_set)-1))),default=list(rep(0,(length(learner$param_set)-1))))
for(i in 1:(length(learner$param_set)-1)){
param_set$levels[i] <- paste(learner$param_set$levels[[i]], collapse = ', ')
param_set$default[i] <- learner$param_set$default[names(learner$param_set$levels)[i]][[1]]
#print(i)
}
param_set<-data.frame(levels=list(rep(0,(length(learner$param_set)-1))),default=list(rep(0,(length(learner$param_set)-1))))
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:(length(learner$param_set)-1)){
param_set$levels[i] <- paste(learner$param_set$levels[[i]], collapse = ', ')
if(length(learner$param_set$default[names(learner$param_set$levels)[i]][[1]])!=0)
{
param_set$default[i] <- learner$param_set$default[names(learner$param_set$levels)[i]][[1]]
}
else{
param_set$default[i] <- NA
}
#print(i)
}
param_set$default
pd <- data.frame(class = unname(learner$param_set$class), lower = unname(learner$param_set$lower), unname(learner$param_set$upper), levels = param_set$levels, default = learner$param_set$default)
NROW(learner$param_set$default)
NROW(param_set$levels)
param_set<-data.frame(levels=list(rep(0,(length(learner$param_set)-1))),default=list(rep(0,(length(learner$param_set)-1))))
p <- as.data.table(learner$param_set)[,c(1,2,3,4,5,9,10)]
for(i in 1:(length(learner$param_set)-1)){
param_set$levels[i] <- paste(learner$param_set$levels[[i]], collapse = ', ')
if(length(learner$param_set$default[names(learner$param_set$levels)[i]][[1]])!=0)
{
param_set$default[i] <- learner$param_set$default[names(learner$param_set$levels)[i]][[1]]
}
else{
param_set$default[i] <- "NA"
}
#print(i)
}
pd <- data.frame(class = unname(learner$param_set$class), lower = unname(learner$param_set$lower), unname(learner$param_set$upper), levels = param_set$levels, default = learner$param_set$default)
NROW(unname(learner$param_set$class))
NROW(unname(learner$param_set$lower))
NROW(unname(learner$param_set$upper))
NROW(param_set$levels)
NROW(param_set$default)
pd <- data.frame(class = unname(learner$param_set$class), lower = unname(learner$param_set$lower), unname(learner$param_set$upper), levels = param_set$levels, default = param_set$default)
pd
learner = lrn("surv.blackboost")
learner$param_set$ids()
#training
learner$train(train_task)
learner$model
#predictions
prediction <- learner$predict(test_task)
prediction
#score
prediction$score()
search_space = ps(
family = p_fct(list("cindex","coxph")),
mstop = p_int(lower = 70, upper = 130),
nu = p_dbl(lower = 0.01, upper = 0.1),
maxdepth = p_int(lower = 2, upper = 8),
stopintern = p_lgl()
)
search_space
CVstrat = rsmp("cv", folds = 10)
measure = msr("surv.cindex")
print(measure)
combo <- trm("combo",
list(trm("evals", n_evals = 50),
trm("stagnation")),
any = TRUE
)
instance = TuningInstanceSingleCrit$new(
task = train_task,
measure = measure,
learner = learner,
resampling = CVstrat,
search_space = search_space,
terminator = combo
)
instance
tuner = tnr("random_search")
tuner$optimize(instance)
instance$is_terminated
#number of optimal stap number
instance$result_learner_param_vals
#step number vs harrel_c
as.data.table(instance$archive)
#train with optimal stepnumber
learner$param_set$values = instance$result_learner_param_vals
learner$train(train_task)
learner$model
prediction = learner$predict(test_task)
prediction
prediction$score()
knitr::opts_chunk$set(echo = TRUE)
library(survivalmodels)
library(mlr3proba); library(mlr3); library(survival)
library(mlr3misc)
library(survival)
library(mboost)
library(mlr3learners)
library(mlr3extralearners)
library("mlr3viz")
autoplot(gbcs_task)
knitr::opts_chunk$set(echo = TRUE)
library(survivalmodels)
library(mlr3proba); library(mlr3); library(survival)
library(mlr3misc)
library(survival)
library(mboost)
library(mlr3learners)
library(mlr3extralearners)
description <- c("Identification Code.","Date of diagnosis.","Date of recurrence free survival.","Date of death.","Age at diagnosis (years).",
"Menopausal status. 1 = Yes, 0 = No.", "Hormone therapy. 1 = Yes. 0 = No.","Tumor size (mm).","Tumor grade (1-3).","Number of nodes.",
"Number of progesterone receptors.","Number of estrogen receptors.","Time to recurrence (days).","Recurrence status. 1 = Recurrence. 0 = Censored.", "Time to death (days).", "Censoring status. 1 = Death. 0 = Censored.")
data.frame("variable" = colnames(gbcs),description)
#load dataset
gbcs <- mlr3proba::gbcs
#select relevant variables
gbcs2 <- gbcs[,c(5:12,15:16)]
summarytools::dfSummary(gbcs,
graph.col = F,
valid.col = F
)
set.seed(123)
train_set = sample(nrow(gbcs2), 0.8 * nrow(gbcs2))
test_set = setdiff(seq_len(nrow(gbcs2)), train_set)
train_gbcs <- gbcs2[train_set, ]
test_gbcs <- gbcs2[test_set, ]
train_task = TaskSurv$new(id = "train_gbcs",
backend = train_gbcs,
time = "survtime",
event = "censdead")
test_task = TaskSurv$new(id = "test_gbcs",
backend = test_gbcs,
time = "survtime",
event = "censdead")
gbcs_task = TaskSurv$new(id = "gbcs",
backend = gbcs2,
time = "survtime", event = "censdead")
library("mlr3viz")
autoplot(gbcs_task)
